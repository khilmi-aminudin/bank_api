// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: accounts.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE m_account
SET balance = balance + $1
WHERE id = $2
RETURNING id, customer_id, number, balance, created_at
`

type AddAccountBalanceParams struct {
	Balance float64   `json:"balance"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (MAccount, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Balance, arg.ID)
	var i MAccount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Number,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO m_account(
    "customer_id",
    "number",
    "balance"
) VALUES (
    $1, $2, $3
) RETURNING id, customer_id, number, balance, created_at
`

type CreateAccountParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	Number     string    `json:"number"`
	Balance    float64   `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (MAccount, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.CustomerID, arg.Number, arg.Balance)
	var i MAccount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Number,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByCustomerID = `-- name: GetAccountByCustomerID :one
SELECT id, customer_id, number, balance, created_at FROM m_account 
WHERE "customer_id" = $1
`

func (q *Queries) GetAccountByCustomerID(ctx context.Context, customerID uuid.UUID) (MAccount, error) {
	row := q.db.QueryRowContext(ctx, getAccountByCustomerID, customerID)
	var i MAccount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Number,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByNumber = `-- name: GetAccountByNumber :one
SELECT id, customer_id, number, balance, created_at FROM m_account 
WHERE "number" = $1
`

func (q *Queries) GetAccountByNumber(ctx context.Context, number string) (MAccount, error) {
	row := q.db.QueryRowContext(ctx, getAccountByNumber, number)
	var i MAccount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Number,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
