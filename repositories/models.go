// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package repositories

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type CustomerEnum string

const (
	CustomerEnumActive   CustomerEnum = "active"
	CustomerEnumInactive CustomerEnum = "inactive"
	CustomerEnumPending  CustomerEnum = "pending"
	CustomerEnumBlocked  CustomerEnum = "blocked"
)

func (e *CustomerEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CustomerEnum(s)
	case string:
		*e = CustomerEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CustomerEnum: %T", src)
	}
	return nil
}

type NullCustomerEnum struct {
	CustomerEnum CustomerEnum
	Valid        bool // Valid is true if CustomerEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCustomerEnum) Scan(value interface{}) error {
	if value == nil {
		ns.CustomerEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CustomerEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCustomerEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CustomerEnum), nil
}

type IDCardType string

const (
	IDCardTypeKTP      IDCardType = "KTP"
	IDCardTypeSIM      IDCardType = "SIM"
	IDCardTypePassport IDCardType = "Passport"
)

func (e *IDCardType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IDCardType(s)
	case string:
		*e = IDCardType(s)
	default:
		return fmt.Errorf("unsupported scan type for IDCardType: %T", src)
	}
	return nil
}

type NullIDCardType struct {
	IDCardType IDCardType
	Valid      bool // Valid is true if IDCardType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIDCardType) Scan(value interface{}) error {
	if value == nil {
		ns.IDCardType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IDCardType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIDCardType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IDCardType), nil
}

type Role string

const (
	RoleUser     Role = "user"
	RoleAdmin    Role = "admin"
	RoleEmployee Role = "employee"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role
	Valid bool // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type TransactionType string

const (
	TransactionTypeTopup      TransactionType = "topup"
	TransactionTypeWithdrawal TransactionType = "withdrawal"
	TransactionTypeTransfer   TransactionType = "transfer"
	TransactionTypePayment    TransactionType = "payment"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType
	Valid           bool // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type Entry struct {
	ID              uuid.UUID       `json:"id"`
	AccountID       uuid.UUID       `json:"account_id"`
	TransactionType TransactionType `json:"transaction_type"`
	TransactionID   uuid.UUID       `json:"transaction_id"`
	Amount          string          `json:"amount"`
}

type MAccount struct {
	ID         uuid.UUID `json:"id"`
	CustomerID uuid.UUID `json:"customer_id"`
	Number     string    `json:"number"`
	Balance    float64   `json:"balance"`
	CreatedAt  time.Time `json:"created_at"`
}

type MCustomer struct {
	ID           uuid.UUID    `json:"id"`
	Role         Role         `json:"role"`
	IDCardType   IDCardType   `json:"id_card_type"`
	IDCardNumber string       `json:"id_card_number"`
	IDCardFile   string       `json:"id_card_file"`
	FirstName    string       `json:"first_name"`
	LastName     string       `json:"last_name"`
	PhoneNumber  string       `json:"phone_number"`
	Email        string       `json:"email"`
	Username     string       `json:"username"`
	Password     string       `json:"password"`
	Status       CustomerEnum `json:"status"`
	CreatedAt    time.Time    `json:"created_at"`
	UpdatedAt    time.Time    `json:"updated_at"`
}

type MMerchant struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Balance   float64   `json:"balance"`
	Address   string    `json:"address"`
	Website   string    `json:"website"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type TransactionHistory struct {
	ID              uuid.UUID       `json:"id"`
	TransactionType TransactionType `json:"transaction_type"`
	FromAccountID   uuid.UUID       `json:"from_account_id"`
	ToAccountID     uuid.NullUUID   `json:"to_account_id"`
	ToMerchantID    uuid.NullUUID   `json:"to_merchant_id"`
	Amount          float64         `json:"amount"`
	Description     string          `json:"description"`
	CreatedAt       time.Time       `json:"created_at"`
}
