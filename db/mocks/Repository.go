// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repositories "github.com/khilmi-aminudin/bank_api/repositories"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddAccountBalance provides a mock function with given fields: ctx, arg
func (_m *Repository) AddAccountBalance(ctx context.Context, arg repositories.AddAccountBalanceParams) (repositories.MAccount, error) {
	ret := _m.Called(ctx, arg)

	var r0 repositories.MAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AddAccountBalanceParams) (repositories.MAccount, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AddAccountBalanceParams) repositories.MAccount); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repositories.MAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.AddAccountBalanceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddMerchantBalance provides a mock function with given fields: ctx, arg
func (_m *Repository) AddMerchantBalance(ctx context.Context, arg repositories.AddMerchantBalanceParams) (repositories.MMerchant, error) {
	ret := _m.Called(ctx, arg)

	var r0 repositories.MMerchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AddMerchantBalanceParams) (repositories.MMerchant, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.AddMerchantBalanceParams) repositories.MMerchant); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repositories.MMerchant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.AddMerchantBalanceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: ctx, arg
func (_m *Repository) CreateAccount(ctx context.Context, arg repositories.CreateAccountParams) (repositories.MAccount, error) {
	ret := _m.Called(ctx, arg)

	var r0 repositories.MAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateAccountParams) (repositories.MAccount, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateAccountParams) repositories.MAccount); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repositories.MAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreateAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomer provides a mock function with given fields: ctx, arg
func (_m *Repository) CreateCustomer(ctx context.Context, arg repositories.CreateCustomerParams) (repositories.MCustomer, error) {
	ret := _m.Called(ctx, arg)

	var r0 repositories.MCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateCustomerParams) (repositories.MCustomer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateCustomerParams) repositories.MCustomer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repositories.MCustomer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreateCustomerParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMerchant provides a mock function with given fields: ctx, arg
func (_m *Repository) CreateMerchant(ctx context.Context, arg repositories.CreateMerchantParams) (repositories.MMerchant, error) {
	ret := _m.Called(ctx, arg)

	var r0 repositories.MMerchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateMerchantParams) (repositories.MMerchant, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateMerchantParams) repositories.MMerchant); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repositories.MMerchant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreateMerchantParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransactionHistory provides a mock function with given fields: ctx, arg
func (_m *Repository) CreateTransactionHistory(ctx context.Context, arg repositories.CreateTransactionHistoryParams) (repositories.TransactionHistory, error) {
	ret := _m.Called(ctx, arg)

	var r0 repositories.TransactionHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateTransactionHistoryParams) (repositories.TransactionHistory, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateTransactionHistoryParams) repositories.TransactionHistory); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repositories.TransactionHistory)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreateTransactionHistoryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByCustomerID provides a mock function with given fields: ctx, customerID
func (_m *Repository) GetAccountByCustomerID(ctx context.Context, customerID uuid.UUID) (repositories.MAccount, error) {
	ret := _m.Called(ctx, customerID)

	var r0 repositories.MAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (repositories.MAccount, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) repositories.MAccount); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(repositories.MAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByNumber provides a mock function with given fields: ctx, number
func (_m *Repository) GetAccountByNumber(ctx context.Context, number string) (repositories.MAccount, error) {
	ret := _m.Called(ctx, number)

	var r0 repositories.MAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repositories.MAccount, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repositories.MAccount); ok {
		r0 = rf(ctx, number)
	} else {
		r0 = ret.Get(0).(repositories.MAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCustomers provides a mock function with given fields: ctx, arg
func (_m *Repository) GetAllCustomers(ctx context.Context, arg repositories.GetAllCustomersParams) ([]repositories.MCustomer, error) {
	ret := _m.Called(ctx, arg)

	var r0 []repositories.MCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetAllCustomersParams) ([]repositories.MCustomer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetAllCustomersParams) []repositories.MCustomer); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.MCustomer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.GetAllCustomersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMerchants provides a mock function with given fields: ctx
func (_m *Repository) GetAllMerchants(ctx context.Context) ([]repositories.MMerchant, error) {
	ret := _m.Called(ctx)

	var r0 []repositories.MMerchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repositories.MMerchant, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repositories.MMerchant); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.MMerchant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) GetCustomerByEmail(ctx context.Context, email string) (repositories.GetCustomerByEmailRow, error) {
	ret := _m.Called(ctx, email)

	var r0 repositories.GetCustomerByEmailRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repositories.GetCustomerByEmailRow, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repositories.GetCustomerByEmailRow); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(repositories.GetCustomerByEmailRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerById provides a mock function with given fields: ctx, id
func (_m *Repository) GetCustomerById(ctx context.Context, id uuid.UUID) (repositories.MCustomer, error) {
	ret := _m.Called(ctx, id)

	var r0 repositories.MCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (repositories.MCustomer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) repositories.MCustomer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repositories.MCustomer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerByUsername provides a mock function with given fields: ctx, username
func (_m *Repository) GetCustomerByUsername(ctx context.Context, username string) (repositories.GetCustomerByUsernameRow, error) {
	ret := _m.Called(ctx, username)

	var r0 repositories.GetCustomerByUsernameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repositories.GetCustomerByUsernameRow, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repositories.GetCustomerByUsernameRow); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(repositories.GetCustomerByUsernameRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantById provides a mock function with given fields: ctx, id
func (_m *Repository) GetMerchantById(ctx context.Context, id uuid.UUID) (repositories.MMerchant, error) {
	ret := _m.Called(ctx, id)

	var r0 repositories.MMerchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (repositories.MMerchant, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) repositories.MMerchant); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repositories.MMerchant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantByName provides a mock function with given fields: ctx, lower
func (_m *Repository) GetMerchantByName(ctx context.Context, lower string) (repositories.MMerchant, error) {
	ret := _m.Called(ctx, lower)

	var r0 repositories.MMerchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repositories.MMerchant, error)); ok {
		return rf(ctx, lower)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repositories.MMerchant); ok {
		r0 = rf(ctx, lower)
	} else {
		r0 = ret.Get(0).(repositories.MMerchant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionHistory provides a mock function with given fields: ctx, fromAccountID
func (_m *Repository) GetTransactionHistory(ctx context.Context, fromAccountID uuid.UUID) ([]repositories.TransactionHistory, error) {
	ret := _m.Called(ctx, fromAccountID)

	var r0 []repositories.TransactionHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]repositories.TransactionHistory, error)); ok {
		return rf(ctx, fromAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []repositories.TransactionHistory); ok {
		r0 = rf(ctx, fromAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.TransactionHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, fromAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionHistoryByType provides a mock function with given fields: ctx, arg
func (_m *Repository) GetTransactionHistoryByType(ctx context.Context, arg repositories.GetTransactionHistoryByTypeParams) ([]repositories.TransactionHistory, error) {
	ret := _m.Called(ctx, arg)

	var r0 []repositories.TransactionHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetTransactionHistoryByTypeParams) ([]repositories.TransactionHistory, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.GetTransactionHistoryByTypeParams) []repositories.TransactionHistory); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.TransactionHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.GetTransactionHistoryByTypeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentTx provides a mock function with given fields: ctx, arg
func (_m *Repository) PaymentTx(ctx context.Context, arg repositories.PaymentTxParams) (repositories.PaymentTxResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 repositories.PaymentTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.PaymentTxParams) (repositories.PaymentTxResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.PaymentTxParams) repositories.PaymentTxResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repositories.PaymentTxResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.PaymentTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopupTx provides a mock function with given fields: ctx, args
func (_m *Repository) TopupTx(ctx context.Context, args repositories.TopupParams) (repositories.TopupResult, error) {
	ret := _m.Called(ctx, args)

	var r0 repositories.TopupResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.TopupParams) (repositories.TopupResult, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.TopupParams) repositories.TopupResult); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(repositories.TopupResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.TopupParams) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferTx provides a mock function with given fields: ctx, arg
func (_m *Repository) TransferTx(ctx context.Context, arg repositories.TranferTxParams) (repositories.TransferTxResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 repositories.TransferTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.TranferTxParams) (repositories.TransferTxResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.TranferTxParams) repositories.TransferTxResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repositories.TransferTxResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.TranferTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomer provides a mock function with given fields: ctx, arg
func (_m *Repository) UpdateCustomer(ctx context.Context, arg repositories.UpdateCustomerParams) (repositories.MCustomer, error) {
	ret := _m.Called(ctx, arg)

	var r0 repositories.MCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.UpdateCustomerParams) (repositories.MCustomer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.UpdateCustomerParams) repositories.MCustomer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(repositories.MCustomer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.UpdateCustomerParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMerchant provides a mock function with given fields: ctx, arg
func (_m *Repository) UpdateMerchant(ctx context.Context, arg repositories.UpdateMerchantParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.UpdateMerchantParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawalTx provides a mock function with given fields: ctx, args
func (_m *Repository) WithdrawalTx(ctx context.Context, args repositories.WithdrawalParams) (repositories.WithdrawalResult, error) {
	ret := _m.Called(ctx, args)

	var r0 repositories.WithdrawalResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.WithdrawalParams) (repositories.WithdrawalResult, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.WithdrawalParams) repositories.WithdrawalResult); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(repositories.WithdrawalResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.WithdrawalParams) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
